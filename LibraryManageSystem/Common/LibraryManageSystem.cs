

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "Common\App.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "Data Source=BIOUSCO\SQLEXPRESS;Initial Catalog=LibraryManage;Integrated Security=True;Data Source=BIOUSCO\SQLEXPRESS;Initial Catalog=LibraryManage;Integrated Security=TrueData Source=BIOUSCO\SQLEXPRESS;Initial Catalog=LibraryManage;Integrated Security=TrueData Source=BIOUSCO\SQLEXPRESS;Initial Catalog=LibraryManage;Integrated Security=TrueData Source=BIOUSCO\SQLEXPRESS;Initial Catalog=LibraryManage;Integrated Security=True;Application Name=LibraryManageSystem"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace Common
{
    // ************************************************************************
    // Unit of work
    public interface IMyDbContext : IDisposable
    {
        DbSet<Book> Books { get; set; } // Book
        DbSet<Borrow> Borrows { get; set; } // Borrow
        DbSet<Manager> Managers { get; set; } // Manager
        DbSet<Viewer> Viewers { get; set; } // Viewer

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
        int Borrow1(string bId, string rId, int? c);
        List<ManagerValidReturnModel> ManagerValid(string mId, string mPwd);
        List<ManagerValidReturnModel> ManagerValid(string mId, string mPwd, out int procResult);
        int Return1(string bId, string rId, int? c);
        List<SearchReturnModel> Search(string bId, string bName, string author, string publisher);
        List<SearchReturnModel> Search(string bId, string bName, string author, string publisher, out int procResult);
        List<ViewerValidReturnModel> ViewerValid(string rId, string rPwd);
        List<ViewerValidReturnModel> ViewerValid(string rId, string rPwd, out int procResult);
    }

    // ************************************************************************
    // Database context
    public class MyDbContext : DbContext, IMyDbContext
    {
        public DbSet<Book> Books { get; set; } // Book
        public DbSet<Borrow> Borrows { get; set; } // Borrow
        public DbSet<Manager> Managers { get; set; } // Manager
        public DbSet<Viewer> Viewers { get; set; } // Viewer
        
        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        public MyDbContext(string connectionString) : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new BookConfiguration());
            modelBuilder.Configurations.Add(new BorrowConfiguration());
            modelBuilder.Configurations.Add(new ManagerConfiguration());
            modelBuilder.Configurations.Add(new ViewerConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BookConfiguration(schema));
            modelBuilder.Configurations.Add(new BorrowConfiguration(schema));
            modelBuilder.Configurations.Add(new ManagerConfiguration(schema));
            modelBuilder.Configurations.Add(new ViewerConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public int Borrow1(string bId, string rId, int? c)
        {
            var bIdParam = new SqlParameter { ParameterName = "@b_id", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = bId, Size = 20 };
            if (bIdParam.Value == null)
                bIdParam.Value = DBNull.Value;

            var rIdParam = new SqlParameter { ParameterName = "@r_id", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = rId, Size = 20 };
            if (rIdParam.Value == null)
                rIdParam.Value = DBNull.Value;

            var cParam = new SqlParameter { ParameterName = "@c", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = c.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!c.HasValue)
                cParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[Borrow1] @b_id, @r_id, @c", bIdParam, rIdParam, cParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public List<ManagerValidReturnModel> ManagerValid(string mId, string mPwd)
        {
            int procResult;
            return ManagerValid(mId, mPwd, out procResult);
        }

        public List<ManagerValidReturnModel> ManagerValid(string mId, string mPwd, out int procResult)
        {
            var mIdParam = new SqlParameter { ParameterName = "@m_id", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = mId, Size = 20 };
            if (mIdParam.Value == null)
                mIdParam.Value = DBNull.Value;

            var mPwdParam = new SqlParameter { ParameterName = "@m_pwd", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = mPwd, Size = 20 };
            if (mPwdParam.Value == null)
                mPwdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ManagerValidReturnModel>("EXEC @procResult = [dbo].[ManagerValid] @m_id, @m_pwd", mIdParam, mPwdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public int Return1(string bId, string rId, int? c)
        {
            var bIdParam = new SqlParameter { ParameterName = "@b_id", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = bId, Size = 20 };
            if (bIdParam.Value == null)
                bIdParam.Value = DBNull.Value;

            var rIdParam = new SqlParameter { ParameterName = "@r_id", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = rId, Size = 20 };
            if (rIdParam.Value == null)
                rIdParam.Value = DBNull.Value;

            var cParam = new SqlParameter { ParameterName = "@c", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = c.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!c.HasValue)
                cParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[Return1] @b_id, @r_id, @c", bIdParam, rIdParam, cParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public List<SearchReturnModel> Search(string bId, string bName, string author, string publisher)
        {
            int procResult;
            return Search(bId, bName, author, publisher, out procResult);
        }

        public List<SearchReturnModel> Search(string bId, string bName, string author, string publisher, out int procResult)
        {
            var bIdParam = new SqlParameter { ParameterName = "@b_id", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = bId, Size = 20 };
            if (bIdParam.Value == null)
                bIdParam.Value = DBNull.Value;

            var bNameParam = new SqlParameter { ParameterName = "@b_name", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = bName, Size = 20 };
            if (bNameParam.Value == null)
                bNameParam.Value = DBNull.Value;

            var authorParam = new SqlParameter { ParameterName = "@author", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = author, Size = 20 };
            if (authorParam.Value == null)
                authorParam.Value = DBNull.Value;

            var publisherParam = new SqlParameter { ParameterName = "@publisher", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = publisher, Size = 20 };
            if (publisherParam.Value == null)
                publisherParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SearchReturnModel>("EXEC @procResult = [dbo].[Search] @b_id, @b_name, @author, @publisher", bIdParam, bNameParam, authorParam, publisherParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public List<ViewerValidReturnModel> ViewerValid(string rId, string rPwd)
        {
            int procResult;
            return ViewerValid(rId, rPwd, out procResult);
        }

        public List<ViewerValidReturnModel> ViewerValid(string rId, string rPwd, out int procResult)
        {
            var rIdParam = new SqlParameter { ParameterName = "@r_id", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = rId, Size = 20 };
            if (rIdParam.Value == null)
                rIdParam.Value = DBNull.Value;

            var rPwdParam = new SqlParameter { ParameterName = "@r_pwd", SqlDbType = SqlDbType.VarChar, Direction = ParameterDirection.Input, Value = rPwd, Size = 20 };
            if (rPwdParam.Value == null)
                rPwdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ViewerValidReturnModel>("EXEC @procResult = [dbo].[ViewerValid] @r_id, @r_pwd", rIdParam, rPwdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

    }

    // ************************************************************************
    // Fake Database context
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Book> Books { get; set; }
        public DbSet<Borrow> Borrows { get; set; }
        public DbSet<Manager> Managers { get; set; }
        public DbSet<Viewer> Viewers { get; set; }

        public FakeMyDbContext()
        {
            Books = new FakeDbSet<Book>();
            Borrows = new FakeDbSet<Borrow>();
            Managers = new FakeDbSet<Manager>();
            Viewers = new FakeDbSet<Viewer>();
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
        public int Borrow1(string bId, string rId, int? c)
        {
 
            return 0;
        }

        public List<ManagerValidReturnModel> ManagerValid(string mId, string mPwd)
        {
            int procResult;
            return ManagerValid(mId, mPwd, out procResult);
        }

        public List<ManagerValidReturnModel> ManagerValid(string mId, string mPwd, out int procResult)
        {

            procResult = 0;
            return new List<ManagerValidReturnModel>();
        }

        public int Return1(string bId, string rId, int? c)
        {
 
            return 0;
        }

        public List<SearchReturnModel> Search(string bId, string bName, string author, string publisher)
        {
            int procResult;
            return Search(bId, bName, author, publisher, out procResult);
        }

        public List<SearchReturnModel> Search(string bId, string bName, string author, string publisher, out int procResult)
        {

            procResult = 0;
            return new List<SearchReturnModel>();
        }

        public List<ViewerValidReturnModel> ViewerValid(string rId, string rPwd)
        {
            int procResult;
            return ViewerValid(rId, rPwd, out procResult);
        }

        public List<ViewerValidReturnModel> ViewerValid(string rId, string rPwd, out int procResult)
        {

            procResult = 0;
            return new List<ViewerValidReturnModel>();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> 
        where TEntity : class 
    { 
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // Book
    public class Book
    {
        public string BId { get; set; } // b_id
        public string BName { get; set; } // b_name
        public string Author { get; set; } // author
        public string Publisher { get; set; } // publisher
        public int Amount { get; set; } // amount
    }

    // Borrow
    public class Borrow
    {
        public string RId { get; set; } // r_id
        public string BId { get; set; } // b_id
        public DateTime BorrowDate { get; set; } // borrow_date
        public DateTime ReturnDate { get; set; } // return_date
        public int? Time { get; set; } // time
    }

    // Manager
    public class Manager
    {
        public string MId { get; set; } // m_id
        public string MName { get; set; } // m_name
        public string MPwd { get; set; } // m_pwd
    }

    // Viewer
    public class Viewer
    {
        public string RId { get; set; } // r_id
        public string RName { get; set; } // r_name
        public string RPwd { get; set; } // r_pwd
        public string @Class { get; set; } // class
    }


    // ************************************************************************
    // POCO Configuration

    // Book
    public class BookConfiguration : EntityTypeConfiguration<Book>
    {
        public BookConfiguration()
            : this("dbo")
        {
        }
 
        public BookConfiguration(string schema)
        {
            ToTable(schema + ".Book");
            HasKey(x => new { x.BId, x.BName, x.Author, x.Publisher, x.Amount });

            Property(x => x.BId).HasColumnName("b_id").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.BName).HasColumnName("b_name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Author).HasColumnName("author").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Publisher).HasColumnName("publisher").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Amount).HasColumnName("amount").IsRequired().HasColumnType("int");
        }
    }

    // Borrow
    public class BorrowConfiguration : EntityTypeConfiguration<Borrow>
    {
        public BorrowConfiguration()
            : this("dbo")
        {
        }
 
        public BorrowConfiguration(string schema)
        {
            ToTable(schema + ".Borrow");
            HasKey(x => new { x.RId, x.BId, x.BorrowDate, x.ReturnDate });

            Property(x => x.RId).HasColumnName("r_id").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.BId).HasColumnName("b_id").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.BorrowDate).HasColumnName("borrow_date").IsRequired().HasColumnType("date");
            Property(x => x.ReturnDate).HasColumnName("return_date").IsRequired().HasColumnType("date");
            Property(x => x.Time).HasColumnName("time").IsOptional().HasColumnType("int");
        }
    }

    // Manager
    public class ManagerConfiguration : EntityTypeConfiguration<Manager>
    {
        public ManagerConfiguration()
            : this("dbo")
        {
        }
 
        public ManagerConfiguration(string schema)
        {
            ToTable(schema + ".Manager");
            HasKey(x => new { x.MId, x.MName, x.MPwd });

            Property(x => x.MId).HasColumnName("m_id").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.MName).HasColumnName("m_name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.MPwd).HasColumnName("m_pwd").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
        }
    }

    // Viewer
    public class ViewerConfiguration : EntityTypeConfiguration<Viewer>
    {
        public ViewerConfiguration()
            : this("dbo")
        {
        }
 
        public ViewerConfiguration(string schema)
        {
            ToTable(schema + ".Viewer");
            HasKey(x => new { x.RId, x.RName, x.RPwd, x.@Class });

            Property(x => x.RId).HasColumnName("r_id").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.RName).HasColumnName("r_name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.RPwd).HasColumnName("r_pwd").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.@Class).HasColumnName("class").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
        }
    }


    // ************************************************************************
    // Stored procedure return models

    public class ManagerValidReturnModel
    {
        public Int32? Column1 { get; set; }
    }

    public class SearchReturnModel
    {
        public String b_id { get; set; }
        public String b_name { get; set; }
        public String author { get; set; }
        public String publisher { get; set; }
        public Int32 amount { get; set; }
    }

    public class ViewerValidReturnModel
    {
        public Int32? Column1 { get; set; }
    }

}
// </auto-generated>

